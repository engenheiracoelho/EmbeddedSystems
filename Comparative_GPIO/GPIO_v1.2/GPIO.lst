
GPIO.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         00000000  00800200  00000aa6  00000b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800200  00800200  00000b3a  2**0
                  ALLOC
  3 .stab         0000270c  00000000  00000000  00000b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c0  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	81 c0       	rjmp	.+258    	; 0x104 <__dtors_end>
   2:	00 00       	nop
   4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
   6:	00 00       	nop
   8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
   a:	00 00       	nop
   c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
   e:	00 00       	nop
  10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
  12:	00 00       	nop
  14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
  16:	00 00       	nop
  18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
  1e:	00 00       	nop
  20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
  22:	00 00       	nop
  24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
  26:	00 00       	nop
  28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
  32:	00 00       	nop
  34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
  36:	00 00       	nop
  38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
  3e:	00 00       	nop
  40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
  42:	00 00       	nop
  44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
  46:	00 00       	nop
  48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
  52:	00 00       	nop
  54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
  56:	00 00       	nop
  58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
  5e:	00 00       	nop
  60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
  62:	00 00       	nop
  64:	70 c0       	rjmp	.+224    	; 0x146 <__bad_interrupt>
  66:	00 00       	nop
  68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
  72:	00 00       	nop
  74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
  76:	00 00       	nop
  78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
  7e:	00 00       	nop
  80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
  82:	00 00       	nop
  84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
  86:	00 00       	nop
  88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
  8e:	00 00       	nop
  90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
  92:	00 00       	nop
  94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
  96:	00 00       	nop
  98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
  be:	00 00       	nop
  c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
  da:	00 00       	nop
  dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
  de:	00 00       	nop
  e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	cb 00       	.word	0x00cb	; ????
  e6:	cb 00       	.word	0x00cb	; ????
  e8:	f0 00       	.word	0x00f0	; ????
  ea:	f0 00       	.word	0x00f0	; ????
  ec:	18 01       	movw	r2, r16
  ee:	33 01       	movw	r6, r6
  f0:	4e 01       	movw	r8, r28
  f2:	4e 01       	movw	r8, r28
  f4:	4e 01       	movw	r8, r28
  f6:	4e 01       	movw	r8, r28
  f8:	76 01       	movw	r14, r12
  fa:	76 01       	movw	r14, r12
  fc:	76 01       	movw	r14, r12
  fe:	76 01       	movw	r14, r12

00000100 <__ctors_start>:
 100:	14 04       	cpc	r1, r4

00000102 <__ctors_end>:
 102:	20 04       	cpc	r2, r0

00000104 <__dtors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d1 e2       	ldi	r29, 0x21	; 33
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_clear_bss>:
 114:	12 e0       	ldi	r17, 0x02	; 2
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b2 e0       	ldi	r27, 0x02	; 2
 11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
 11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
 11e:	a8 32       	cpi	r26, 0x28	; 40
 120:	b1 07       	cpc	r27, r17
 122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>

00000124 <__do_global_ctors>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	c2 e0       	ldi	r28, 0x02	; 2
 128:	d1 e0       	ldi	r29, 0x01	; 1
 12a:	00 e0       	ldi	r16, 0x00	; 0
 12c:	05 c0       	rjmp	.+10     	; 0x138 <__do_global_ctors+0x14>
 12e:	22 97       	sbiw	r28, 0x02	; 2
 130:	01 09       	sbc	r16, r1
 132:	fe 01       	movw	r30, r28
 134:	0b bf       	out	0x3b, r16	; 59
 136:	96 d3       	rcall	.+1836   	; 0x864 <__tablejump_elpm__>
 138:	c0 30       	cpi	r28, 0x00	; 0
 13a:	d1 07       	cpc	r29, r17
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 07       	cpc	r16, r24
 140:	b1 f7       	brne	.-20     	; 0x12e <__do_global_ctors+0xa>
 142:	9f d1       	rcall	.+830    	; 0x482 <main>
 144:	9f c4       	rjmp	.+2366   	; 0xa84 <__do_global_dtors>

00000146 <__bad_interrupt>:
 146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_ZN4GPIOC1EhNS_15PortDirection_tE>:
 */

#include <avr/io.h>
#include "GPIO.h"

GPIO::GPIO(uint8_t id, PortDirection_t dir):
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <_ZN4GPIOC1EhNS_15PortDirection_tE+0x6>
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	6b 83       	std	Y+3, r22	; 0x03
 15a:	4c 83       	std	Y+4, r20	; 0x04
_id(id)
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	2b 81       	ldd	r18, Y+3	; 0x03
 162:	fc 01       	movw	r30, r24
 164:	26 83       	std	Z+6, r18	; 0x06
{
	switch (_id) {
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	fc 01       	movw	r30, r24
 16c:	86 81       	ldd	r24, Z+6	; 0x06
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	aa 27       	eor	r26, r26
 174:	97 fd       	sbrc	r25, 7
 176:	a0 95       	com	r26
 178:	ba 2f       	mov	r27, r26
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	2d e0       	ldi	r18, 0x0D	; 13
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	84 1b       	sub	r24, r20
 184:	95 0b       	sbc	r25, r21
 186:	28 17       	cp	r18, r24
 188:	39 07       	cpc	r19, r25
 18a:	08 f4       	brcc	.+2      	; 0x18e <_ZN4GPIOC1EhNS_15PortDirection_tE+0x46>
 18c:	d7 c0       	rjmp	.+430    	; 0x33c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1f4>
 18e:	8e 58       	subi	r24, 0x8E	; 142
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	fc 01       	movw	r30, r24
 194:	61 c3       	rjmp	.+1730   	; 0x858 <__tablejump2__>
 196:	8b 81       	ldd	r24, Y+3	; 0x03
	case 0:
	case 1:
		_bit = (1 << id);
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x5e>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x5a>
 1aa:	28 2f       	mov	r18, r24
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	fc 01       	movw	r30, r24
 1b2:	27 83       	std	Z+7, r18	; 0x07
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
		_pin = &PINE;
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	2c e2       	ldi	r18, 0x2C	; 44
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	31 83       	std	Z+1, r19	; 0x01
 1c0:	20 83       	st	Z, r18
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
		_ddr = &DDRE;
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	2d e2       	ldi	r18, 0x2D	; 45
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	33 83       	std	Z+3, r19	; 0x03
 1ce:	22 83       	std	Z+2, r18	; 0x02
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
		_port = &PORTE;
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	2e e2       	ldi	r18, 0x2E	; 46
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	35 83       	std	Z+5, r19	; 0x05
 1dc:	24 83       	std	Z+4, r18	; 0x04
 1de:	ae c0       	rjmp	.+348    	; 0x33c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1f4>
		break;
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03

	case 2:
	case 3:
		_bit = (1 << (id + 2));
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	9c 01       	movw	r18, r24
 1e8:	2e 5f       	subi	r18, 0xFE	; 254
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_ZN4GPIOC1EhNS_15PortDirection_tE+0xae>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	2a 95       	dec	r18
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_ZN4GPIOC1EhNS_15PortDirection_tE+0xaa>
 1fa:	28 2f       	mov	r18, r24
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	fc 01       	movw	r30, r24
 202:	27 83       	std	Z+7, r18	; 0x07
 204:	89 81       	ldd	r24, Y+1	; 0x01
		_pin = &PINE;
 206:	9a 81       	ldd	r25, Y+2	; 0x02
 208:	2c e2       	ldi	r18, 0x2C	; 44
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	31 83       	std	Z+1, r19	; 0x01
 210:	20 83       	st	Z, r18
 212:	89 81       	ldd	r24, Y+1	; 0x01
		_ddr = &DDRE;
 214:	9a 81       	ldd	r25, Y+2	; 0x02
 216:	2d e2       	ldi	r18, 0x2D	; 45
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	33 83       	std	Z+3, r19	; 0x03
 21e:	22 83       	std	Z+2, r18	; 0x02
 220:	89 81       	ldd	r24, Y+1	; 0x01
		_port = &PORTE;
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	2e e2       	ldi	r18, 0x2E	; 46
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	35 83       	std	Z+5, r19	; 0x05
 22c:	24 83       	std	Z+4, r18	; 0x04
 22e:	86 c0       	rjmp	.+268    	; 0x33c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1f4>
		break;
 230:	89 81       	ldd	r24, Y+1	; 0x01

	case 4:
		_bit = (1 << DDG5);
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	fc 01       	movw	r30, r24
 238:	27 83       	std	Z+7, r18	; 0x07
 23a:	89 81       	ldd	r24, Y+1	; 0x01
		_pin = &PING;
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	22 e3       	ldi	r18, 0x32	; 50
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	31 83       	std	Z+1, r19	; 0x01
 246:	20 83       	st	Z, r18
 248:	89 81       	ldd	r24, Y+1	; 0x01
		_ddr = &DDRG;
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	23 e3       	ldi	r18, 0x33	; 51
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	33 83       	std	Z+3, r19	; 0x03
 254:	22 83       	std	Z+2, r18	; 0x02
 256:	89 81       	ldd	r24, Y+1	; 0x01
		_port = &PORTG;
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	24 e3       	ldi	r18, 0x34	; 52
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	35 83       	std	Z+5, r19	; 0x05
 262:	24 83       	std	Z+4, r18	; 0x04
 264:	6b c0       	rjmp	.+214    	; 0x33c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1f4>
		break;
 266:	89 81       	ldd	r24, Y+1	; 0x01

	case 5:
		_bit = (1 << DDE3);
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	28 e0       	ldi	r18, 0x08	; 8
 26c:	fc 01       	movw	r30, r24
 26e:	27 83       	std	Z+7, r18	; 0x07
 270:	89 81       	ldd	r24, Y+1	; 0x01
		_pin = &PINE;
 272:	9a 81       	ldd	r25, Y+2	; 0x02
 274:	2c e2       	ldi	r18, 0x2C	; 44
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	31 83       	std	Z+1, r19	; 0x01
 27c:	20 83       	st	Z, r18
 27e:	89 81       	ldd	r24, Y+1	; 0x01
		_ddr = &DDRE;
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	2d e2       	ldi	r18, 0x2D	; 45
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	33 83       	std	Z+3, r19	; 0x03
 28a:	22 83       	std	Z+2, r18	; 0x02
 28c:	89 81       	ldd	r24, Y+1	; 0x01
		_port = &PORTE;
 28e:	9a 81       	ldd	r25, Y+2	; 0x02
 290:	2e e2       	ldi	r18, 0x2E	; 46
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	35 83       	std	Z+5, r19	; 0x05
 298:	24 83       	std	Z+4, r18	; 0x04
 29a:	50 c0       	rjmp	.+160    	; 0x33c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1f4>
		break;
 29c:	8b 81       	ldd	r24, Y+3	; 0x03

	case 6:
	case 7:
	case 8:
	case 9:
		_bit = (1 << (id - 3));
 29e:	88 2f       	mov	r24, r24
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9c 01       	movw	r18, r24
 2a4:	23 50       	subi	r18, 0x03	; 3
 2a6:	31 09       	sbc	r19, r1
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x16a>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <_ZN4GPIOC1EhNS_15PortDirection_tE+0x166>
 2b6:	28 2f       	mov	r18, r24
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	fc 01       	movw	r30, r24
 2be:	27 83       	std	Z+7, r18	; 0x07
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
		_pin = &PINH;
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	31 e0       	ldi	r19, 0x01	; 1
 2c8:	fc 01       	movw	r30, r24
 2ca:	31 83       	std	Z+1, r19	; 0x01
 2cc:	20 83       	st	Z, r18
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
		_ddr = &DDRH;
 2d0:	9a 81       	ldd	r25, Y+2	; 0x02
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	31 e0       	ldi	r19, 0x01	; 1
 2d6:	fc 01       	movw	r30, r24
 2d8:	33 83       	std	Z+3, r19	; 0x03
 2da:	22 83       	std	Z+2, r18	; 0x02
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
		_port = &PORTH;
 2de:	9a 81       	ldd	r25, Y+2	; 0x02
 2e0:	22 e0       	ldi	r18, 0x02	; 2
 2e2:	31 e0       	ldi	r19, 0x01	; 1
 2e4:	fc 01       	movw	r30, r24
 2e6:	35 83       	std	Z+5, r19	; 0x05
 2e8:	24 83       	std	Z+4, r18	; 0x04
 2ea:	28 c0       	rjmp	.+80     	; 0x33c <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1f4>
		break;
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03

	case 10:
	case 11:
	case 12:
	case 13:
		_bit = (1 << (id - 6));
 2ee:	88 2f       	mov	r24, r24
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	9c 01       	movw	r18, r24
 2f4:	26 50       	subi	r18, 0x06	; 6
 2f6:	31 09       	sbc	r19, r1
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1ba>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	2a 95       	dec	r18
 304:	e2 f7       	brpl	.-8      	; 0x2fe <_ZN4GPIOC1EhNS_15PortDirection_tE+0x1b6>
 306:	28 2f       	mov	r18, r24
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	fc 01       	movw	r30, r24
 30e:	27 83       	std	Z+7, r18	; 0x07
 310:	89 81       	ldd	r24, Y+1	; 0x01
		_pin = &PINB;
 312:	9a 81       	ldd	r25, Y+2	; 0x02
 314:	23 e2       	ldi	r18, 0x23	; 35
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	31 83       	std	Z+1, r19	; 0x01
 31c:	20 83       	st	Z, r18
 31e:	89 81       	ldd	r24, Y+1	; 0x01
		_ddr = &DDRB;
 320:	9a 81       	ldd	r25, Y+2	; 0x02
 322:	24 e2       	ldi	r18, 0x24	; 36
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	fc 01       	movw	r30, r24
 328:	33 83       	std	Z+3, r19	; 0x03
 32a:	22 83       	std	Z+2, r18	; 0x02
 32c:	89 81       	ldd	r24, Y+1	; 0x01
		_port = &PORTB;
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	25 e2       	ldi	r18, 0x25	; 37
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	fc 01       	movw	r30, r24
 336:	35 83       	std	Z+5, r19	; 0x05
 338:	24 83       	std	Z+4, r18	; 0x04
 33a:	00 00       	nop
		break;
 33c:	8c 81       	ldd	r24, Y+4	; 0x04

	}

	if (dir)
 33e:	88 23       	and	r24, r24
 340:	a1 f0       	breq	.+40     	; 0x36a <_ZN4GPIOC1EhNS_15PortDirection_tE+0x222>
 342:	89 81       	ldd	r24, Y+1	; 0x01
		*_ddr |= _bit;
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	fc 01       	movw	r30, r24
 348:	82 81       	ldd	r24, Z+2	; 0x02
 34a:	93 81       	ldd	r25, Z+3	; 0x03
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	3a 81       	ldd	r19, Y+2	; 0x02
 350:	f9 01       	movw	r30, r18
 352:	22 81       	ldd	r18, Z+2	; 0x02
 354:	33 81       	ldd	r19, Z+3	; 0x03
 356:	f9 01       	movw	r30, r18
 358:	40 81       	ld	r20, Z
 35a:	29 81       	ldd	r18, Y+1	; 0x01
 35c:	3a 81       	ldd	r19, Y+2	; 0x02
 35e:	f9 01       	movw	r30, r18
 360:	27 81       	ldd	r18, Z+7	; 0x07
 362:	24 2b       	or	r18, r20
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
 368:	15 c0       	rjmp	.+42     	; 0x394 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x24c>
 36a:	89 81       	ldd	r24, Y+1	; 0x01
	else
		*_ddr &= ~_bit;
 36c:	9a 81       	ldd	r25, Y+2	; 0x02
 36e:	fc 01       	movw	r30, r24
 370:	82 81       	ldd	r24, Z+2	; 0x02
 372:	93 81       	ldd	r25, Z+3	; 0x03
 374:	29 81       	ldd	r18, Y+1	; 0x01
 376:	3a 81       	ldd	r19, Y+2	; 0x02
 378:	f9 01       	movw	r30, r18
 37a:	22 81       	ldd	r18, Z+2	; 0x02
 37c:	33 81       	ldd	r19, Z+3	; 0x03
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	42 2f       	mov	r20, r18
 384:	29 81       	ldd	r18, Y+1	; 0x01
 386:	3a 81       	ldd	r19, Y+2	; 0x02
 388:	f9 01       	movw	r30, r18
 38a:	27 81       	ldd	r18, Z+7	; 0x07
 38c:	20 95       	com	r18
 38e:	24 23       	and	r18, r20
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
 394:	0f 90       	pop	r0

}
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <_ZN4GPIOD1Ev>:

GPIO::~GPIO() {}
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	1f 92       	push	r1
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	89 83       	std	Y+1, r24	; 0x01
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <_ZN4GPIO3setEb>:
bool GPIO::get() {
	return (bool) _pin & _bit;
}


void GPIO::set(bool val) {
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	00 d0       	rcall	.+0      	; 0x3c2 <_ZN4GPIO3setEb+0x6>
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	6b 83       	std	Y+3, r22	; 0x03
	if (val)
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	88 23       	and	r24, r24
 3d0:	a1 f0       	breq	.+40     	; 0x3fa <_ZN4GPIO3setEb+0x3e>
		*_port |= _bit;
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	fc 01       	movw	r30, r24
 3d8:	84 81       	ldd	r24, Z+4	; 0x04
 3da:	95 81       	ldd	r25, Z+5	; 0x05
 3dc:	29 81       	ldd	r18, Y+1	; 0x01
 3de:	3a 81       	ldd	r19, Y+2	; 0x02
 3e0:	f9 01       	movw	r30, r18
 3e2:	24 81       	ldd	r18, Z+4	; 0x04
 3e4:	35 81       	ldd	r19, Z+5	; 0x05
 3e6:	f9 01       	movw	r30, r18
 3e8:	40 81       	ld	r20, Z
 3ea:	29 81       	ldd	r18, Y+1	; 0x01
 3ec:	3a 81       	ldd	r19, Y+2	; 0x02
 3ee:	f9 01       	movw	r30, r18
 3f0:	27 81       	ldd	r18, Z+7	; 0x07
 3f2:	24 2b       	or	r18, r20
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
 3f8:	15 c0       	rjmp	.+42     	; 0x424 <_ZN4GPIO3setEb+0x68>
	else
		*_port &= ~_bit;
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	fc 01       	movw	r30, r24
 400:	84 81       	ldd	r24, Z+4	; 0x04
 402:	95 81       	ldd	r25, Z+5	; 0x05
 404:	29 81       	ldd	r18, Y+1	; 0x01
 406:	3a 81       	ldd	r19, Y+2	; 0x02
 408:	f9 01       	movw	r30, r18
 40a:	24 81       	ldd	r18, Z+4	; 0x04
 40c:	35 81       	ldd	r19, Z+5	; 0x05
 40e:	f9 01       	movw	r30, r18
 410:	20 81       	ld	r18, Z
 412:	42 2f       	mov	r20, r18
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	3a 81       	ldd	r19, Y+2	; 0x02
 418:	f9 01       	movw	r30, r18
 41a:	27 81       	ldd	r18, Z+7	; 0x07
 41c:	20 95       	com	r18
 41e:	24 23       	and	r18, r20
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18
}
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <_ZN4GPIO5clearEv>:

void GPIO::clear() {
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	1f 92       	push	r1
 436:	1f 92       	push	r1
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	89 83       	std	Y+1, r24	; 0x01
	this->set(0);
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	ba df       	rcall	.-140    	; 0x3bc <_ZN4GPIO3setEb>
 448:	0f 90       	pop	r0
}
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <_ZN4GPIO6toggleEv>:

void GPIO::toggle() {
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	1f 92       	push	r1
 458:	1f 92       	push	r1
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 45e:	9a 83       	std	Y+2, r25	; 0x02
 460:	89 83       	std	Y+1, r24	; 0x01
	*_pin = _bit;
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	9a 81       	ldd	r25, Y+2	; 0x02
 466:	fc 01       	movw	r30, r24
 468:	80 81       	ld	r24, Z
 46a:	91 81       	ldd	r25, Z+1	; 0x01
 46c:	29 81       	ldd	r18, Y+1	; 0x01
 46e:	3a 81       	ldd	r19, Y+2	; 0x02
 470:	f9 01       	movw	r30, r18
 472:	27 81       	ldd	r18, Z+7	; 0x07
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <main>:

//Adicionar LED
GPIO led4(4, GPIO::OUTPUT);		//PG5
GPIO led6(6, GPIO::OUTPUT);		//PH0

int main(void){
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	aa 97       	sbiw	r28, 0x2a	; 42
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61

	UCSR0B = 0;
 496:	81 ec       	ldi	r24, 0xC1	; 193
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	10 82       	st	Z, r1

	led0.set(1);
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	92 e0       	ldi	r25, 0x02	; 2
 4a4:	8b df       	rcall	.-234    	; 0x3bc <_ZN4GPIO3setEb>
 4a6:	61 e0       	ldi	r22, 0x01	; 1
	led1.set(1);
 4a8:	88 e0       	ldi	r24, 0x08	; 8
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	87 df       	rcall	.-242    	; 0x3bc <_ZN4GPIO3setEb>
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	92 e0       	ldi	r25, 0x02	; 2
	led6.clear();
 4b2:	be df       	rcall	.-132    	; 0x430 <_ZN4GPIO5clearEv>
 4b4:	88 e1       	ldi	r24, 0x18	; 24
 4b6:	92 e0       	ldi	r25, 0x02	; 2
 4b8:	bb df       	rcall	.-138    	; 0x430 <_ZN4GPIO5clearEv>
	led4.clear();
 4ba:	80 e1       	ldi	r24, 0x10	; 16
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	b8 df       	rcall	.-144    	; 0x430 <_ZN4GPIO5clearEv>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
	led13.clear();
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	aa e7       	ldi	r26, 0x7A	; 122
 4c6:	b4 e4       	ldi	r27, 0x44	; 68
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	9a 83       	std	Y+2, r25	; 0x02
 4cc:	ab 83       	std	Y+3, r26	; 0x03
 4ce:	bc 83       	std	Y+4, r27	; 0x04
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	4a e7       	ldi	r20, 0x7A	; 122
 4d6:	55 e4       	ldi	r21, 0x45	; 69
 4d8:	69 81       	ldd	r22, Y+1	; 0x01
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 4da:	7a 81       	ldd	r23, Y+2	; 0x02
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	9c 81       	ldd	r25, Y+4	; 0x04
 4e0:	46 d2       	rcall	.+1164   	; 0x96e <__mulsf3>
 4e2:	dc 01       	movw	r26, r24
 4e4:	cb 01       	movw	r24, r22
 4e6:	8d 83       	std	Y+5, r24	; 0x05
 4e8:	9e 83       	std	Y+6, r25	; 0x06
 4ea:	af 83       	std	Y+7, r26	; 0x07
 4ec:	b8 87       	std	Y+8, r27	; 0x08
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e8       	ldi	r20, 0x80	; 128
 4f4:	5f e3       	ldi	r21, 0x3F	; 63
 4f6:	6d 81       	ldd	r22, Y+5	; 0x05
 4f8:	7e 81       	ldd	r23, Y+6	; 0x06
	if (__tmp < 1.0)
 4fa:	8f 81       	ldd	r24, Y+7	; 0x07
 4fc:	98 85       	ldd	r25, Y+8	; 0x08
 4fe:	b6 d1       	rcall	.+876    	; 0x86c <__cmpsf2>
 500:	88 23       	and	r24, r24
 502:	2c f4       	brge	.+10     	; 0x50e <main+0x8c>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	9a 87       	std	Y+10, r25	; 0x0a
 50a:	89 87       	std	Y+9, r24	; 0x09
 50c:	3b c0       	rjmp	.+118    	; 0x584 <main+0x102>
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
 512:	4f e7       	ldi	r20, 0x7F	; 127
 514:	57 e4       	ldi	r21, 0x47	; 71
 516:	6d 81       	ldd	r22, Y+5	; 0x05
 518:	7e 81       	ldd	r23, Y+6	; 0x06
 51a:	8f 81       	ldd	r24, Y+7	; 0x07
	else if (__tmp > 65535)
 51c:	98 85       	ldd	r25, Y+8	; 0x08
 51e:	23 d2       	rcall	.+1094   	; 0x966 <__gesf2>
 520:	18 16       	cp	r1, r24
 522:	3c f5       	brge	.+78     	; 0x572 <main+0xf0>
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 e2       	ldi	r20, 0x20	; 32
 52a:	51 e4       	ldi	r21, 0x41	; 65
 52c:	69 81       	ldd	r22, Y+1	; 0x01
 52e:	7a 81       	ldd	r23, Y+2	; 0x02
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 534:	1c d2       	rcall	.+1080   	; 0x96e <__mulsf3>
 536:	dc 01       	movw	r26, r24
 538:	cb 01       	movw	r24, r22
 53a:	bc 01       	movw	r22, r24
 53c:	cd 01       	movw	r24, r26
 53e:	9a d1       	rcall	.+820    	; 0x874 <__fixunssfsi>
 540:	dc 01       	movw	r26, r24
 542:	cb 01       	movw	r24, r22
 544:	9a 87       	std	Y+10, r25	; 0x0a
 546:	89 87       	std	Y+9, r24	; 0x09
 548:	0f c0       	rjmp	.+30     	; 0x568 <main+0xe6>
 54a:	80 e9       	ldi	r24, 0x90	; 144
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	9c 87       	std	Y+12, r25	; 0x0c
 550:	8b 87       	std	Y+11, r24	; 0x0b
 552:	8b 85       	ldd	r24, Y+11	; 0x0b
 554:	9c 85       	ldd	r25, Y+12	; 0x0c
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <main+0xd4>
 55a:	9c 87       	std	Y+12, r25	; 0x0c
 55c:	8b 87       	std	Y+11, r24	; 0x0b
 55e:	89 85       	ldd	r24, Y+9	; 0x09
 560:	9a 85       	ldd	r25, Y+10	; 0x0a
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	9a 87       	std	Y+10, r25	; 0x0a
 566:	89 87       	std	Y+9, r24	; 0x09
 568:	89 85       	ldd	r24, Y+9	; 0x09
 56a:	9a 85       	ldd	r25, Y+10	; 0x0a
 56c:	00 97       	sbiw	r24, 0x00	; 0
 56e:	69 f7       	brne	.-38     	; 0x54a <main+0xc8>
 570:	13 c0       	rjmp	.+38     	; 0x598 <main+0x116>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 572:	6d 81       	ldd	r22, Y+5	; 0x05
 574:	7e 81       	ldd	r23, Y+6	; 0x06
 576:	8f 81       	ldd	r24, Y+7	; 0x07
 578:	98 85       	ldd	r25, Y+8	; 0x08
 57a:	7c d1       	rcall	.+760    	; 0x874 <__fixunssfsi>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 57c:	dc 01       	movw	r26, r24
 57e:	cb 01       	movw	r24, r22
 580:	9a 87       	std	Y+10, r25	; 0x0a
 582:	89 87       	std	Y+9, r24	; 0x09
 584:	89 85       	ldd	r24, Y+9	; 0x09
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 586:	9a 85       	ldd	r25, Y+10	; 0x0a
 588:	9e 87       	std	Y+14, r25	; 0x0e
 58a:	8d 87       	std	Y+13, r24	; 0x0d
 58c:	8d 85       	ldd	r24, Y+13	; 0x0d
 58e:	9e 85       	ldd	r25, Y+14	; 0x0e
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <main+0x10e>
 594:	9e 87       	std	Y+14, r25	; 0x0e
 596:	8d 87       	std	Y+13, r24	; 0x0d
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	49 df       	rcall	.-366    	; 0x430 <_ZN4GPIO5clearEv>
 59e:	88 e0       	ldi	r24, 0x08	; 8
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	46 df       	rcall	.-372    	; 0x430 <_ZN4GPIO5clearEv>
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	80 e2       	ldi	r24, 0x20	; 32
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	08 df       	rcall	.-496    	; 0x3bc <_ZN4GPIO3setEb>
 5ac:	61 e0       	ldi	r22, 0x01	; 1
	_delay_ms(1000);
	led0.clear();
 5ae:	88 e1       	ldi	r24, 0x18	; 24
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	04 df       	rcall	.-504    	; 0x3bc <_ZN4GPIO3setEb>
 5b4:	61 e0       	ldi	r22, 0x01	; 1
	led1.clear();
 5b6:	80 e1       	ldi	r24, 0x10	; 16
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	00 df       	rcall	.-512    	; 0x3bc <_ZN4GPIO3setEb>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
	led6.set(1);
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	aa e7       	ldi	r26, 0x7A	; 122
 5c2:	b4 e4       	ldi	r27, 0x44	; 68
 5c4:	8f 87       	std	Y+15, r24	; 0x0f
 5c6:	98 8b       	std	Y+16, r25	; 0x10
	led4.set(1);
 5c8:	a9 8b       	std	Y+17, r26	; 0x11
 5ca:	ba 8b       	std	Y+18, r27	; 0x12
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	4a e7       	ldi	r20, 0x7A	; 122
 5d2:	55 e4       	ldi	r21, 0x45	; 69
 5d4:	6f 85       	ldd	r22, Y+15	; 0x0f
 5d6:	78 89       	ldd	r23, Y+16	; 0x10
 5d8:	89 89       	ldd	r24, Y+17	; 0x11
 5da:	9a 89       	ldd	r25, Y+18	; 0x12
 5dc:	c8 d1       	rcall	.+912    	; 0x96e <__mulsf3>
 5de:	dc 01       	movw	r26, r24
 5e0:	cb 01       	movw	r24, r22
 5e2:	8b 8b       	std	Y+19, r24	; 0x13
 5e4:	9c 8b       	std	Y+20, r25	; 0x14
 5e6:	ad 8b       	std	Y+21, r26	; 0x15
 5e8:	be 8b       	std	Y+22, r27	; 0x16
 5ea:	20 e0       	ldi	r18, 0x00	; 0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	40 e8       	ldi	r20, 0x80	; 128
 5f0:	5f e3       	ldi	r21, 0x3F	; 63
 5f2:	6b 89       	ldd	r22, Y+19	; 0x13
 5f4:	7c 89       	ldd	r23, Y+20	; 0x14
 5f6:	8d 89       	ldd	r24, Y+21	; 0x15
 5f8:	9e 89       	ldd	r25, Y+22	; 0x16
 5fa:	38 d1       	rcall	.+624    	; 0x86c <__cmpsf2>
 5fc:	88 23       	and	r24, r24
 5fe:	2c f4       	brge	.+10     	; 0x60a <main+0x188>
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	98 8f       	std	Y+24, r25	; 0x18
 606:	8f 8b       	std	Y+23, r24	; 0x17
 608:	3b c0       	rjmp	.+118    	; 0x680 <main+0x1fe>
 60a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 60c:	3f ef       	ldi	r19, 0xFF	; 255
 60e:	4f e7       	ldi	r20, 0x7F	; 127
 610:	57 e4       	ldi	r21, 0x47	; 71
 612:	6b 89       	ldd	r22, Y+19	; 0x13
 614:	7c 89       	ldd	r23, Y+20	; 0x14
 616:	8d 89       	ldd	r24, Y+21	; 0x15
 618:	9e 89       	ldd	r25, Y+22	; 0x16
 61a:	a5 d1       	rcall	.+842    	; 0x966 <__gesf2>
 61c:	18 16       	cp	r1, r24
 61e:	3c f5       	brge	.+78     	; 0x66e <main+0x1ec>
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
		__ticks = 1;
 624:	40 e2       	ldi	r20, 0x20	; 32
 626:	51 e4       	ldi	r21, 0x41	; 65
 628:	6f 85       	ldd	r22, Y+15	; 0x0f
 62a:	78 89       	ldd	r23, Y+16	; 0x10
 62c:	89 89       	ldd	r24, Y+17	; 0x11
	else if (__tmp > 65535)
 62e:	9a 89       	ldd	r25, Y+18	; 0x12
 630:	9e d1       	rcall	.+828    	; 0x96e <__mulsf3>
 632:	dc 01       	movw	r26, r24
 634:	cb 01       	movw	r24, r22
 636:	bc 01       	movw	r22, r24
 638:	cd 01       	movw	r24, r26
 63a:	1c d1       	rcall	.+568    	; 0x874 <__fixunssfsi>
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	98 8f       	std	Y+24, r25	; 0x18
 642:	8f 8b       	std	Y+23, r24	; 0x17
 644:	0f c0       	rjmp	.+30     	; 0x664 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 646:	80 e9       	ldi	r24, 0x90	; 144
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	9a 8f       	std	Y+26, r25	; 0x1a
 64c:	89 8f       	std	Y+25, r24	; 0x19
 64e:	89 8d       	ldd	r24, Y+25	; 0x19
 650:	9a 8d       	ldd	r25, Y+26	; 0x1a
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <main+0x1d0>
 656:	9a 8f       	std	Y+26, r25	; 0x1a
 658:	89 8f       	std	Y+25, r24	; 0x19
 65a:	8f 89       	ldd	r24, Y+23	; 0x17
 65c:	98 8d       	ldd	r25, Y+24	; 0x18
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	98 8f       	std	Y+24, r25	; 0x18
 662:	8f 8b       	std	Y+23, r24	; 0x17
 664:	8f 89       	ldd	r24, Y+23	; 0x17
 666:	98 8d       	ldd	r25, Y+24	; 0x18
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	69 f7       	brne	.-38     	; 0x646 <main+0x1c4>
 66c:	13 c0       	rjmp	.+38     	; 0x694 <main+0x212>
 66e:	6b 89       	ldd	r22, Y+19	; 0x13
 670:	7c 89       	ldd	r23, Y+20	; 0x14
 672:	8d 89       	ldd	r24, Y+21	; 0x15
 674:	9e 89       	ldd	r25, Y+22	; 0x16
 676:	fe d0       	rcall	.+508    	; 0x874 <__fixunssfsi>
 678:	dc 01       	movw	r26, r24
 67a:	cb 01       	movw	r24, r22
 67c:	98 8f       	std	Y+24, r25	; 0x18
 67e:	8f 8b       	std	Y+23, r24	; 0x17
 680:	8f 89       	ldd	r24, Y+23	; 0x17
 682:	98 8d       	ldd	r25, Y+24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 684:	9c 8f       	std	Y+28, r25	; 0x1c
 686:	8b 8f       	std	Y+27, r24	; 0x1b
 688:	8b 8d       	ldd	r24, Y+27	; 0x1b
 68a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 68c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 68e:	f1 f7       	brne	.-4      	; 0x68c <main+0x20a>
 690:	9c 8f       	std	Y+28, r25	; 0x1c
 692:	8b 8f       	std	Y+27, r24	; 0x1b
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	92 e0       	ldi	r25, 0x02	; 2
 698:	dc de       	rcall	.-584    	; 0x452 <_ZN4GPIO6toggleEv>
 69a:	88 e0       	ldi	r24, 0x08	; 8
 69c:	92 e0       	ldi	r25, 0x02	; 2
 69e:	d9 de       	rcall	.-590    	; 0x452 <_ZN4GPIO6toggleEv>
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	92 e0       	ldi	r25, 0x02	; 2
 6a4:	d6 de       	rcall	.-596    	; 0x452 <_ZN4GPIO6toggleEv>
 6a6:	88 e1       	ldi	r24, 0x18	; 24
 6a8:	92 e0       	ldi	r25, 0x02	; 2
 6aa:	d3 de       	rcall	.-602    	; 0x452 <_ZN4GPIO6toggleEv>
 6ac:	80 e1       	ldi	r24, 0x10	; 16
 6ae:	92 e0       	ldi	r25, 0x02	; 2
 6b0:	d0 de       	rcall	.-608    	; 0x452 <_ZN4GPIO6toggleEv>
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	aa e7       	ldi	r26, 0x7A	; 122
 6b8:	b4 e4       	ldi	r27, 0x44	; 68
 6ba:	8d 8f       	std	Y+29, r24	; 0x1d
 6bc:	9e 8f       	std	Y+30, r25	; 0x1e
 6be:	af 8f       	std	Y+31, r26	; 0x1f
	led13.set(1);
	_delay_ms(1000);

	while (1){
		led0.toggle();
 6c0:	b8 a3       	std	Y+32, r27	; 0x20
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	4a e7       	ldi	r20, 0x7A	; 122
		led1.toggle();
 6c8:	55 e4       	ldi	r21, 0x45	; 69
 6ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
 6cc:	7e 8d       	ldd	r23, Y+30	; 0x1e
 6ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
		led6.toggle();
 6d0:	98 a1       	ldd	r25, Y+32	; 0x20
 6d2:	4d d1       	rcall	.+666    	; 0x96e <__mulsf3>
 6d4:	dc 01       	movw	r26, r24
 6d6:	cb 01       	movw	r24, r22
		led4.toggle();
 6d8:	89 a3       	std	Y+33, r24	; 0x21
 6da:	9a a3       	std	Y+34, r25	; 0x22
 6dc:	ab a3       	std	Y+35, r26	; 0x23
 6de:	bc a3       	std	Y+36, r27	; 0x24
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	40 e8       	ldi	r20, 0x80	; 128
 6e6:	5f e3       	ldi	r21, 0x3F	; 63
 6e8:	69 a1       	ldd	r22, Y+33	; 0x21
 6ea:	7a a1       	ldd	r23, Y+34	; 0x22
 6ec:	8b a1       	ldd	r24, Y+35	; 0x23
 6ee:	9c a1       	ldd	r25, Y+36	; 0x24
 6f0:	bd d0       	rcall	.+378    	; 0x86c <__cmpsf2>
 6f2:	88 23       	and	r24, r24
 6f4:	2c f4       	brge	.+10     	; 0x700 <main+0x27e>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	9e a3       	std	Y+38, r25	; 0x26
 6fc:	8d a3       	std	Y+37, r24	; 0x25
 6fe:	3b c0       	rjmp	.+118    	; 0x776 <main+0x2f4>
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	3f ef       	ldi	r19, 0xFF	; 255
 704:	4f e7       	ldi	r20, 0x7F	; 127
 706:	57 e4       	ldi	r21, 0x47	; 71
 708:	69 a1       	ldd	r22, Y+33	; 0x21
 70a:	7a a1       	ldd	r23, Y+34	; 0x22
 70c:	8b a1       	ldd	r24, Y+35	; 0x23
 70e:	9c a1       	ldd	r25, Y+36	; 0x24
 710:	2a d1       	rcall	.+596    	; 0x966 <__gesf2>
 712:	18 16       	cp	r1, r24
 714:	3c f5       	brge	.+78     	; 0x764 <main+0x2e2>
 716:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	40 e2       	ldi	r20, 0x20	; 32
 71c:	51 e4       	ldi	r21, 0x41	; 65
 71e:	6d 8d       	ldd	r22, Y+29	; 0x1d
 720:	7e 8d       	ldd	r23, Y+30	; 0x1e
 722:	8f 8d       	ldd	r24, Y+31	; 0x1f
 724:	98 a1       	ldd	r25, Y+32	; 0x20
 726:	23 d1       	rcall	.+582    	; 0x96e <__mulsf3>
 728:	dc 01       	movw	r26, r24
 72a:	cb 01       	movw	r24, r22
 72c:	bc 01       	movw	r22, r24
 72e:	cd 01       	movw	r24, r26
		__ticks = 1;
 730:	a1 d0       	rcall	.+322    	; 0x874 <__fixunssfsi>
 732:	dc 01       	movw	r26, r24
 734:	cb 01       	movw	r24, r22
 736:	9e a3       	std	Y+38, r25	; 0x26
 738:	8d a3       	std	Y+37, r24	; 0x25
	else if (__tmp > 65535)
 73a:	0f c0       	rjmp	.+30     	; 0x75a <main+0x2d8>
 73c:	80 e9       	ldi	r24, 0x90	; 144
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	98 a7       	std	Y+40, r25	; 0x28
 742:	8f a3       	std	Y+39, r24	; 0x27
 744:	8f a1       	ldd	r24, Y+39	; 0x27
 746:	98 a5       	ldd	r25, Y+40	; 0x28
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <main+0x2c6>
 74c:	98 a7       	std	Y+40, r25	; 0x28
 74e:	8f a3       	std	Y+39, r24	; 0x27
 750:	8d a1       	ldd	r24, Y+37	; 0x25
 752:	9e a1       	ldd	r25, Y+38	; 0x26
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	9e a3       	std	Y+38, r25	; 0x26
 758:	8d a3       	std	Y+37, r24	; 0x25
 75a:	8d a1       	ldd	r24, Y+37	; 0x25
 75c:	9e a1       	ldd	r25, Y+38	; 0x26
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	69 f7       	brne	.-38     	; 0x73c <main+0x2ba>
 762:	98 cf       	rjmp	.-208    	; 0x694 <main+0x212>
 764:	69 a1       	ldd	r22, Y+33	; 0x21
 766:	7a a1       	ldd	r23, Y+34	; 0x22
 768:	8b a1       	ldd	r24, Y+35	; 0x23
 76a:	9c a1       	ldd	r25, Y+36	; 0x24
 76c:	83 d0       	rcall	.+262    	; 0x874 <__fixunssfsi>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	9e a3       	std	Y+38, r25	; 0x26
 774:	8d a3       	std	Y+37, r24	; 0x25
 776:	8d a1       	ldd	r24, Y+37	; 0x25
 778:	9e a1       	ldd	r25, Y+38	; 0x26
 77a:	9a a7       	std	Y+42, r25	; 0x2a
 77c:	89 a7       	std	Y+41, r24	; 0x29
 77e:	89 a5       	ldd	r24, Y+41	; 0x29
 780:	9a a5       	ldd	r25, Y+42	; 0x2a
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <main+0x300>
 786:	9a a7       	std	Y+42, r25	; 0x2a
 788:	89 a7       	std	Y+41, r24	; 0x29
 78a:	84 cf       	rjmp	.-248    	; 0x694 <main+0x212>

0000078c <_Z41__static_initialization_and_destruction_0ii>:
		led13.toggle();
		_delay_ms(1000);
	}

}
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	00 d0       	rcall	.+0      	; 0x792 <_Z41__static_initialization_and_destruction_0ii+0x6>
 792:	1f 92       	push	r1
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	9a 83       	std	Y+2, r25	; 0x02
 79a:	89 83       	std	Y+1, r24	; 0x01
 79c:	7c 83       	std	Y+4, r23	; 0x04
 79e:	6b 83       	std	Y+3, r22	; 0x03
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	9a 81       	ldd	r25, Y+2	; 0x02
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	91 05       	cpc	r25, r1
 7a8:	f9 f4       	brne	.+62     	; 0x7e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	9c 81       	ldd	r25, Y+4	; 0x04
 7ae:	8f 3f       	cpi	r24, 0xFF	; 255
 7b0:	2f ef       	ldi	r18, 0xFF	; 255
 7b2:	92 07       	cpc	r25, r18
 7b4:	c9 f4       	brne	.+50     	; 0x7e8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
#include <util/delay.h>
#include "GPIO.h"


//LEDS PLACA (acende com '0')
GPIO led0(0, GPIO::OUTPUT);		//PE0
 7b6:	41 e0       	ldi	r20, 0x01	; 1
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	92 e0       	ldi	r25, 0x02	; 2
 7be:	c4 dc       	rcall	.-1656   	; 0x148 <_ZN4GPIOC1EhNS_15PortDirection_tE>
 7c0:	41 e0       	ldi	r20, 0x01	; 1
GPIO led1(1, GPIO::OUTPUT);		//PE1
 7c2:	61 e0       	ldi	r22, 0x01	; 1
 7c4:	88 e0       	ldi	r24, 0x08	; 8
 7c6:	92 e0       	ldi	r25, 0x02	; 2
 7c8:	bf dc       	rcall	.-1666   	; 0x148 <_ZN4GPIOC1EhNS_15PortDirection_tE>
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	6d e0       	ldi	r22, 0x0D	; 13

//LEDS PLACA (acende com '1')
GPIO led13(13, GPIO::OUTPUT);	//PB7
 7ce:	80 e1       	ldi	r24, 0x10	; 16
 7d0:	92 e0       	ldi	r25, 0x02	; 2
 7d2:	ba dc       	rcall	.-1676   	; 0x148 <_ZN4GPIOC1EhNS_15PortDirection_tE>
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	64 e0       	ldi	r22, 0x04	; 4
 7d8:	88 e1       	ldi	r24, 0x18	; 24

//Adicionar LED
GPIO led4(4, GPIO::OUTPUT);		//PG5
 7da:	92 e0       	ldi	r25, 0x02	; 2
 7dc:	b5 dc       	rcall	.-1686   	; 0x148 <_ZN4GPIOC1EhNS_15PortDirection_tE>
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	66 e0       	ldi	r22, 0x06	; 6
 7e2:	80 e2       	ldi	r24, 0x20	; 32
 7e4:	92 e0       	ldi	r25, 0x02	; 2
GPIO led6(6, GPIO::OUTPUT);		//PH0
 7e6:	b0 dc       	rcall	.-1696   	; 0x148 <_ZN4GPIOC1EhNS_15PortDirection_tE>
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	a9 f4       	brne	.+42     	; 0x81a <_Z41__static_initialization_and_destruction_0ii+0x8e>
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	9c 81       	ldd	r25, Y+4	; 0x04
 7f4:	8f 3f       	cpi	r24, 0xFF	; 255
 7f6:	2f ef       	ldi	r18, 0xFF	; 255
 7f8:	92 07       	cpc	r25, r18
 7fa:	79 f4       	brne	.+30     	; 0x81a <_Z41__static_initialization_and_destruction_0ii+0x8e>
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	92 e0       	ldi	r25, 0x02	; 2
 800:	d0 dd       	rcall	.-1120   	; 0x3a2 <_ZN4GPIOD1Ev>
 802:	88 e1       	ldi	r24, 0x18	; 24
 804:	92 e0       	ldi	r25, 0x02	; 2
 806:	cd dd       	rcall	.-1126   	; 0x3a2 <_ZN4GPIOD1Ev>
 808:	80 e1       	ldi	r24, 0x10	; 16
 80a:	92 e0       	ldi	r25, 0x02	; 2
 80c:	ca dd       	rcall	.-1132   	; 0x3a2 <_ZN4GPIOD1Ev>

//LEDS PLACA (acende com '1')
GPIO led13(13, GPIO::OUTPUT);	//PB7

//Adicionar LED
GPIO led4(4, GPIO::OUTPUT);		//PG5
 80e:	88 e0       	ldi	r24, 0x08	; 8
 810:	92 e0       	ldi	r25, 0x02	; 2
 812:	c7 dd       	rcall	.-1138   	; 0x3a2 <_ZN4GPIOD1Ev>
 814:	80 e0       	ldi	r24, 0x00	; 0
//LEDS PLACA (acende com '0')
GPIO led0(0, GPIO::OUTPUT);		//PE0
GPIO led1(1, GPIO::OUTPUT);		//PE1

//LEDS PLACA (acende com '1')
GPIO led13(13, GPIO::OUTPUT);	//PB7
 816:	92 e0       	ldi	r25, 0x02	; 2
 818:	c4 dd       	rcall	.-1144   	; 0x3a2 <_ZN4GPIOD1Ev>
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
#include "GPIO.h"


//LEDS PLACA (acende com '0')
GPIO led0(0, GPIO::OUTPUT);		//PE0
GPIO led1(1, GPIO::OUTPUT);		//PE1
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
#include <util/delay.h>
#include "GPIO.h"


//LEDS PLACA (acende com '0')
GPIO led0(0, GPIO::OUTPUT);		//PE0
 826:	08 95       	ret

00000828 <_GLOBAL__sub_I_led0>:
		led4.toggle();
		led13.toggle();
		_delay_ms(1000);
	}

}
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
 830:	6f ef       	ldi	r22, 0xFF	; 255
 832:	7f ef       	ldi	r23, 0xFF	; 255
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	a9 df       	rcall	.-174    	; 0x78c <_Z41__static_initialization_and_destruction_0ii>
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <_GLOBAL__sub_D_led0>:
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	6f ef       	ldi	r22, 0xFF	; 255
 84a:	7f ef       	ldi	r23, 0xFF	; 255
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	9d df       	rcall	.-198    	; 0x78c <_Z41__static_initialization_and_destruction_0ii>
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <__tablejump2__>:
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31

0000085c <__tablejump__>:
 85c:	05 90       	lpm	r0, Z+
 85e:	f4 91       	lpm	r31, Z
 860:	e0 2d       	mov	r30, r0
 862:	19 94       	eijmp

00000864 <__tablejump_elpm__>:
 864:	07 90       	elpm	r0, Z+
 866:	f6 91       	elpm	r31, Z
 868:	e0 2d       	mov	r30, r0
 86a:	19 94       	eijmp

0000086c <__cmpsf2>:
 86c:	2f d0       	rcall	.+94     	; 0x8cc <__fp_cmp>
 86e:	08 f4       	brcc	.+2      	; 0x872 <__cmpsf2+0x6>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	08 95       	ret

00000874 <__fixunssfsi>:
 874:	57 d0       	rcall	.+174    	; 0x924 <__fp_splitA>
 876:	88 f0       	brcs	.+34     	; 0x89a <__fixunssfsi+0x26>
 878:	9f 57       	subi	r25, 0x7F	; 127
 87a:	90 f0       	brcs	.+36     	; 0x8a0 <__fixunssfsi+0x2c>
 87c:	b9 2f       	mov	r27, r25
 87e:	99 27       	eor	r25, r25
 880:	b7 51       	subi	r27, 0x17	; 23
 882:	a0 f0       	brcs	.+40     	; 0x8ac <__fixunssfsi+0x38>
 884:	d1 f0       	breq	.+52     	; 0x8ba <__fixunssfsi+0x46>
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	1a f0       	brmi	.+6      	; 0x896 <__fixunssfsi+0x22>
 890:	ba 95       	dec	r27
 892:	c9 f7       	brne	.-14     	; 0x886 <__fixunssfsi+0x12>
 894:	12 c0       	rjmp	.+36     	; 0x8ba <__fixunssfsi+0x46>
 896:	b1 30       	cpi	r27, 0x01	; 1
 898:	81 f0       	breq	.+32     	; 0x8ba <__fixunssfsi+0x46>
 89a:	5e d0       	rcall	.+188    	; 0x958 <__fp_zero>
 89c:	b1 e0       	ldi	r27, 0x01	; 1
 89e:	08 95       	ret
 8a0:	5b c0       	rjmp	.+182    	; 0x958 <__fp_zero>
 8a2:	67 2f       	mov	r22, r23
 8a4:	78 2f       	mov	r23, r24
 8a6:	88 27       	eor	r24, r24
 8a8:	b8 5f       	subi	r27, 0xF8	; 248
 8aa:	39 f0       	breq	.+14     	; 0x8ba <__fixunssfsi+0x46>
 8ac:	b9 3f       	cpi	r27, 0xF9	; 249
 8ae:	cc f3       	brlt	.-14     	; 0x8a2 <__fixunssfsi+0x2e>
 8b0:	86 95       	lsr	r24
 8b2:	77 95       	ror	r23
 8b4:	67 95       	ror	r22
 8b6:	b3 95       	inc	r27
 8b8:	d9 f7       	brne	.-10     	; 0x8b0 <__fixunssfsi+0x3c>
 8ba:	3e f4       	brtc	.+14     	; 0x8ca <__fixunssfsi+0x56>
 8bc:	90 95       	com	r25
 8be:	80 95       	com	r24
 8c0:	70 95       	com	r23
 8c2:	61 95       	neg	r22
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	08 95       	ret

000008cc <__fp_cmp>:
 8cc:	99 0f       	add	r25, r25
 8ce:	00 08       	sbc	r0, r0
 8d0:	55 0f       	add	r21, r21
 8d2:	aa 0b       	sbc	r26, r26
 8d4:	e0 e8       	ldi	r30, 0x80	; 128
 8d6:	fe ef       	ldi	r31, 0xFE	; 254
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	e8 07       	cpc	r30, r24
 8de:	f9 07       	cpc	r31, r25
 8e0:	c0 f0       	brcs	.+48     	; 0x912 <__fp_cmp+0x46>
 8e2:	12 16       	cp	r1, r18
 8e4:	13 06       	cpc	r1, r19
 8e6:	e4 07       	cpc	r30, r20
 8e8:	f5 07       	cpc	r31, r21
 8ea:	98 f0       	brcs	.+38     	; 0x912 <__fp_cmp+0x46>
 8ec:	62 1b       	sub	r22, r18
 8ee:	73 0b       	sbc	r23, r19
 8f0:	84 0b       	sbc	r24, r20
 8f2:	95 0b       	sbc	r25, r21
 8f4:	39 f4       	brne	.+14     	; 0x904 <__fp_cmp+0x38>
 8f6:	0a 26       	eor	r0, r26
 8f8:	61 f0       	breq	.+24     	; 0x912 <__fp_cmp+0x46>
 8fa:	23 2b       	or	r18, r19
 8fc:	24 2b       	or	r18, r20
 8fe:	25 2b       	or	r18, r21
 900:	21 f4       	brne	.+8      	; 0x90a <__fp_cmp+0x3e>
 902:	08 95       	ret
 904:	0a 26       	eor	r0, r26
 906:	09 f4       	brne	.+2      	; 0x90a <__fp_cmp+0x3e>
 908:	a1 40       	sbci	r26, 0x01	; 1
 90a:	a6 95       	lsr	r26
 90c:	8f ef       	ldi	r24, 0xFF	; 255
 90e:	81 1d       	adc	r24, r1
 910:	81 1d       	adc	r24, r1
 912:	08 95       	ret

00000914 <__fp_split3>:
 914:	57 fd       	sbrc	r21, 7
 916:	90 58       	subi	r25, 0x80	; 128
 918:	44 0f       	add	r20, r20
 91a:	55 1f       	adc	r21, r21
 91c:	59 f0       	breq	.+22     	; 0x934 <__fp_splitA+0x10>
 91e:	5f 3f       	cpi	r21, 0xFF	; 255
 920:	71 f0       	breq	.+28     	; 0x93e <__fp_splitA+0x1a>
 922:	47 95       	ror	r20

00000924 <__fp_splitA>:
 924:	88 0f       	add	r24, r24
 926:	97 fb       	bst	r25, 7
 928:	99 1f       	adc	r25, r25
 92a:	61 f0       	breq	.+24     	; 0x944 <__fp_splitA+0x20>
 92c:	9f 3f       	cpi	r25, 0xFF	; 255
 92e:	79 f0       	breq	.+30     	; 0x94e <__fp_splitA+0x2a>
 930:	87 95       	ror	r24
 932:	08 95       	ret
 934:	12 16       	cp	r1, r18
 936:	13 06       	cpc	r1, r19
 938:	14 06       	cpc	r1, r20
 93a:	55 1f       	adc	r21, r21
 93c:	f2 cf       	rjmp	.-28     	; 0x922 <__fp_split3+0xe>
 93e:	46 95       	lsr	r20
 940:	f1 df       	rcall	.-30     	; 0x924 <__fp_splitA>
 942:	08 c0       	rjmp	.+16     	; 0x954 <__fp_splitA+0x30>
 944:	16 16       	cp	r1, r22
 946:	17 06       	cpc	r1, r23
 948:	18 06       	cpc	r1, r24
 94a:	99 1f       	adc	r25, r25
 94c:	f1 cf       	rjmp	.-30     	; 0x930 <__fp_splitA+0xc>
 94e:	86 95       	lsr	r24
 950:	71 05       	cpc	r23, r1
 952:	61 05       	cpc	r22, r1
 954:	08 94       	sec
 956:	08 95       	ret

00000958 <__fp_zero>:
 958:	e8 94       	clt

0000095a <__fp_szero>:
 95a:	bb 27       	eor	r27, r27
 95c:	66 27       	eor	r22, r22
 95e:	77 27       	eor	r23, r23
 960:	cb 01       	movw	r24, r22
 962:	97 f9       	bld	r25, 7
 964:	08 95       	ret

00000966 <__gesf2>:
 966:	b2 df       	rcall	.-156    	; 0x8cc <__fp_cmp>
 968:	08 f4       	brcc	.+2      	; 0x96c <__gesf2+0x6>
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	08 95       	ret

0000096e <__mulsf3>:
 96e:	0b d0       	rcall	.+22     	; 0x986 <__mulsf3x>
 970:	78 c0       	rjmp	.+240    	; 0xa62 <__fp_round>
 972:	69 d0       	rcall	.+210    	; 0xa46 <__fp_pscA>
 974:	28 f0       	brcs	.+10     	; 0x980 <__mulsf3+0x12>
 976:	6e d0       	rcall	.+220    	; 0xa54 <__fp_pscB>
 978:	18 f0       	brcs	.+6      	; 0x980 <__mulsf3+0x12>
 97a:	95 23       	and	r25, r21
 97c:	09 f0       	breq	.+2      	; 0x980 <__mulsf3+0x12>
 97e:	5a c0       	rjmp	.+180    	; 0xa34 <__fp_inf>
 980:	5f c0       	rjmp	.+190    	; 0xa40 <__fp_nan>
 982:	11 24       	eor	r1, r1
 984:	ea cf       	rjmp	.-44     	; 0x95a <__fp_szero>

00000986 <__mulsf3x>:
 986:	c6 df       	rcall	.-116    	; 0x914 <__fp_split3>
 988:	a0 f3       	brcs	.-24     	; 0x972 <__mulsf3+0x4>

0000098a <__mulsf3_pse>:
 98a:	95 9f       	mul	r25, r21
 98c:	d1 f3       	breq	.-12     	; 0x982 <__mulsf3+0x14>
 98e:	95 0f       	add	r25, r21
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	55 1f       	adc	r21, r21
 994:	62 9f       	mul	r22, r18
 996:	f0 01       	movw	r30, r0
 998:	72 9f       	mul	r23, r18
 99a:	bb 27       	eor	r27, r27
 99c:	f0 0d       	add	r31, r0
 99e:	b1 1d       	adc	r27, r1
 9a0:	63 9f       	mul	r22, r19
 9a2:	aa 27       	eor	r26, r26
 9a4:	f0 0d       	add	r31, r0
 9a6:	b1 1d       	adc	r27, r1
 9a8:	aa 1f       	adc	r26, r26
 9aa:	64 9f       	mul	r22, r20
 9ac:	66 27       	eor	r22, r22
 9ae:	b0 0d       	add	r27, r0
 9b0:	a1 1d       	adc	r26, r1
 9b2:	66 1f       	adc	r22, r22
 9b4:	82 9f       	mul	r24, r18
 9b6:	22 27       	eor	r18, r18
 9b8:	b0 0d       	add	r27, r0
 9ba:	a1 1d       	adc	r26, r1
 9bc:	62 1f       	adc	r22, r18
 9be:	73 9f       	mul	r23, r19
 9c0:	b0 0d       	add	r27, r0
 9c2:	a1 1d       	adc	r26, r1
 9c4:	62 1f       	adc	r22, r18
 9c6:	83 9f       	mul	r24, r19
 9c8:	a0 0d       	add	r26, r0
 9ca:	61 1d       	adc	r22, r1
 9cc:	22 1f       	adc	r18, r18
 9ce:	74 9f       	mul	r23, r20
 9d0:	33 27       	eor	r19, r19
 9d2:	a0 0d       	add	r26, r0
 9d4:	61 1d       	adc	r22, r1
 9d6:	23 1f       	adc	r18, r19
 9d8:	84 9f       	mul	r24, r20
 9da:	60 0d       	add	r22, r0
 9dc:	21 1d       	adc	r18, r1
 9de:	82 2f       	mov	r24, r18
 9e0:	76 2f       	mov	r23, r22
 9e2:	6a 2f       	mov	r22, r26
 9e4:	11 24       	eor	r1, r1
 9e6:	9f 57       	subi	r25, 0x7F	; 127
 9e8:	50 40       	sbci	r21, 0x00	; 0
 9ea:	8a f0       	brmi	.+34     	; 0xa0e <__mulsf3_pse+0x84>
 9ec:	e1 f0       	breq	.+56     	; 0xa26 <__mulsf3_pse+0x9c>
 9ee:	88 23       	and	r24, r24
 9f0:	4a f0       	brmi	.+18     	; 0xa04 <__mulsf3_pse+0x7a>
 9f2:	ee 0f       	add	r30, r30
 9f4:	ff 1f       	adc	r31, r31
 9f6:	bb 1f       	adc	r27, r27
 9f8:	66 1f       	adc	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	91 50       	subi	r25, 0x01	; 1
 a00:	50 40       	sbci	r21, 0x00	; 0
 a02:	a9 f7       	brne	.-22     	; 0x9ee <__mulsf3_pse+0x64>
 a04:	9e 3f       	cpi	r25, 0xFE	; 254
 a06:	51 05       	cpc	r21, r1
 a08:	70 f0       	brcs	.+28     	; 0xa26 <__mulsf3_pse+0x9c>
 a0a:	14 c0       	rjmp	.+40     	; 0xa34 <__fp_inf>
 a0c:	a6 cf       	rjmp	.-180    	; 0x95a <__fp_szero>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	ec f3       	brlt	.-6      	; 0xa0c <__mulsf3_pse+0x82>
 a12:	98 3e       	cpi	r25, 0xE8	; 232
 a14:	dc f3       	brlt	.-10     	; 0xa0c <__mulsf3_pse+0x82>
 a16:	86 95       	lsr	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	b7 95       	ror	r27
 a1e:	f7 95       	ror	r31
 a20:	e7 95       	ror	r30
 a22:	9f 5f       	subi	r25, 0xFF	; 255
 a24:	c1 f7       	brne	.-16     	; 0xa16 <__mulsf3_pse+0x8c>
 a26:	fe 2b       	or	r31, r30
 a28:	88 0f       	add	r24, r24
 a2a:	91 1d       	adc	r25, r1
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <__fp_inf>:
 a34:	97 f9       	bld	r25, 7
 a36:	9f 67       	ori	r25, 0x7F	; 127
 a38:	80 e8       	ldi	r24, 0x80	; 128
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	08 95       	ret

00000a40 <__fp_nan>:
 a40:	9f ef       	ldi	r25, 0xFF	; 255
 a42:	80 ec       	ldi	r24, 0xC0	; 192
 a44:	08 95       	ret

00000a46 <__fp_pscA>:
 a46:	00 24       	eor	r0, r0
 a48:	0a 94       	dec	r0
 a4a:	16 16       	cp	r1, r22
 a4c:	17 06       	cpc	r1, r23
 a4e:	18 06       	cpc	r1, r24
 a50:	09 06       	cpc	r0, r25
 a52:	08 95       	ret

00000a54 <__fp_pscB>:
 a54:	00 24       	eor	r0, r0
 a56:	0a 94       	dec	r0
 a58:	12 16       	cp	r1, r18
 a5a:	13 06       	cpc	r1, r19
 a5c:	14 06       	cpc	r1, r20
 a5e:	05 06       	cpc	r0, r21
 a60:	08 95       	ret

00000a62 <__fp_round>:
 a62:	09 2e       	mov	r0, r25
 a64:	03 94       	inc	r0
 a66:	00 0c       	add	r0, r0
 a68:	11 f4       	brne	.+4      	; 0xa6e <__fp_round+0xc>
 a6a:	88 23       	and	r24, r24
 a6c:	52 f0       	brmi	.+20     	; 0xa82 <__fp_round+0x20>
 a6e:	bb 0f       	add	r27, r27
 a70:	40 f4       	brcc	.+16     	; 0xa82 <__fp_round+0x20>
 a72:	bf 2b       	or	r27, r31
 a74:	11 f4       	brne	.+4      	; 0xa7a <__fp_round+0x18>
 a76:	60 ff       	sbrs	r22, 0
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <__fp_round+0x20>
 a7a:	6f 5f       	subi	r22, 0xFF	; 255
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	08 95       	ret

00000a84 <__do_global_dtors>:
 a84:	11 e0       	ldi	r17, 0x01	; 1
 a86:	c2 e0       	ldi	r28, 0x02	; 2
 a88:	d1 e0       	ldi	r29, 0x01	; 1
 a8a:	00 e0       	ldi	r16, 0x00	; 0
 a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__do_global_dtors+0x14>
 a8e:	22 97       	sbiw	r28, 0x02	; 2
 a90:	01 09       	sbc	r16, r1
 a92:	fe 01       	movw	r30, r28
 a94:	0b bf       	out	0x3b, r16	; 59
 a96:	e6 de       	rcall	.-564    	; 0x864 <__tablejump_elpm__>
 a98:	c4 30       	cpi	r28, 0x04	; 4
 a9a:	d1 07       	cpc	r29, r17
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	08 07       	cpc	r16, r24
 aa0:	b1 f7       	brne	.-20     	; 0xa8e <__do_global_dtors+0xa>
 aa2:	f8 94       	cli

00000aa4 <__stop_program>:
 aa4:	ff cf       	rjmp	.-2      	; 0xaa4 <__stop_program>
