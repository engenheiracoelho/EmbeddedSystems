
UART.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         00000000  00800200  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000011d0  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ea4  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	68 d0       	rcall	.+208    	; 0x1c6 <main>
  f6:	9c c0       	rjmp	.+312    	; 0x230 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN4UARTC1EiNS_10Databits_tENS_8Parity_tENS_10Stop_bit_tE>:
 *    Author: Leticia Coelho
 */

#include "UART.h"

UART::UART(int Baud, Databits_t Data,Parity_t Parity, Stop_bit_t Stop){
  fa:	0f 93       	push	r16
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	2d 97       	sbiw	r28, 0x0d	; 13
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	8b 83       	std	Y+3, r24	; 0x03
 114:	7e 83       	std	Y+6, r23	; 0x06
 116:	6d 83       	std	Y+5, r22	; 0x05
 118:	4f 83       	std	Y+7, r20	; 0x07
 11a:	28 87       	std	Y+8, r18	; 0x08
 11c:	09 87       	std	Y+9, r16	; 0x09

	uint16_t MYUBRR = (F_CPU/16/Baud-1);
 11e:	8d 81       	ldd	r24, Y+5	; 0x05
 120:	9e 81       	ldd	r25, Y+6	; 0x06
 122:	9c 01       	movw	r18, r24
 124:	44 27       	eor	r20, r20
 126:	37 fd       	sbrc	r19, 7
 128:	40 95       	com	r20
 12a:	54 2f       	mov	r21, r20
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	92 e4       	ldi	r25, 0x42	; 66
 130:	af e0       	ldi	r26, 0x0F	; 15
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	59 d0       	rcall	.+178    	; 0x1ec <__udivmodsi4>
 13a:	da 01       	movw	r26, r20
 13c:	c9 01       	movw	r24, r18
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	9a 83       	std	Y+2, r25	; 0x02
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	84 ec       	ldi	r24, 0xC4	; 196
	UBRR0 = MYUBRR;
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	3a 81       	ldd	r19, Y+2	; 0x02
 14c:	fc 01       	movw	r30, r24
 14e:	31 83       	std	Z+1, r19	; 0x01
 150:	20 83       	st	Z, r18
 152:	81 ec       	ldi	r24, 0xC1	; 193
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	28 e1       	ldi	r18, 0x18	; 24
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	82 ec       	ldi	r24, 0xC2	; 194
	UCSR0C = Data|Parity|Stop;
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	3f 81       	ldd	r19, Y+7	; 0x07
 162:	28 85       	ldd	r18, Y+8	; 0x08
 164:	32 2b       	or	r19, r18
 166:	29 85       	ldd	r18, Y+9	; 0x09
 168:	23 2b       	or	r18, r19
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
 16e:	2d 96       	adiw	r28, 0x0d	; 13

}
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <_ZN4UART13UART_TransmitEh>:

void UART::UART_Transmit(unsigned char data){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 d0       	rcall	.+0      	; 0x188 <_ZN4UART13UART_TransmitEh+0x6>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	6b 83       	std	Y+3, r22	; 0x03
	while(!(UCSR0A & (1<<UDRE0)));
 192:	00 00       	nop
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	80 81       	ld	r24, Z
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 72       	andi	r24, 0x20	; 32
 1a2:	99 27       	eor	r25, r25
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	09 f0       	breq	.+2      	; 0x1ac <_ZN4UART13UART_TransmitEh+0x2a>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	22 23       	and	r18, r18
 1ae:	91 f7       	brne	.-28     	; 0x194 <_ZN4UART13UART_TransmitEh+0x12>
		UDR0 = data;
 1b0:	86 ec       	ldi	r24, 0xC6	; 198
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2b 81       	ldd	r18, Y+3	; 0x03
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
}
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <main>:
#include <avr/io.h>
#include "UART.h"

int main(void){
 1c6:	0f 93       	push	r16
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62

	UART uart_t(9600,UART::Databits_8,UART::NONE,UART::ONE);
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	46 e0       	ldi	r20, 0x06	; 6
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	75 e2       	ldi	r23, 0x25	; 37
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	8c df       	rcall	.-232    	; 0xfa <_ZN4UARTC1EiNS_10Databits_tENS_8Parity_tENS_10Stop_bit_tE>
 1e2:	61 e6       	ldi	r22, 0x61	; 97
		while(1){
			uart_t.UART_Transmit('a');
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	cc df       	rcall	.-104    	; 0x182 <_ZN4UART13UART_TransmitEh>
 1ea:	fb cf       	rjmp	.-10     	; 0x1e2 <main+0x1c>

000001ec <__udivmodsi4>:
 1ec:	a1 e2       	ldi	r26, 0x21	; 33
 1ee:	1a 2e       	mov	r1, r26
 1f0:	aa 1b       	sub	r26, r26
 1f2:	bb 1b       	sub	r27, r27
 1f4:	fd 01       	movw	r30, r26
 1f6:	0d c0       	rjmp	.+26     	; 0x212 <__udivmodsi4_ep>

000001f8 <__udivmodsi4_loop>:
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	ee 1f       	adc	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	a2 17       	cp	r26, r18
 202:	b3 07       	cpc	r27, r19
 204:	e4 07       	cpc	r30, r20
 206:	f5 07       	cpc	r31, r21
 208:	20 f0       	brcs	.+8      	; 0x212 <__udivmodsi4_ep>
 20a:	a2 1b       	sub	r26, r18
 20c:	b3 0b       	sbc	r27, r19
 20e:	e4 0b       	sbc	r30, r20
 210:	f5 0b       	sbc	r31, r21

00000212 <__udivmodsi4_ep>:
 212:	66 1f       	adc	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	88 1f       	adc	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	1a 94       	dec	r1
 21c:	69 f7       	brne	.-38     	; 0x1f8 <__udivmodsi4_loop>
 21e:	60 95       	com	r22
 220:	70 95       	com	r23
 222:	80 95       	com	r24
 224:	90 95       	com	r25
 226:	9b 01       	movw	r18, r22
 228:	ac 01       	movw	r20, r24
 22a:	bd 01       	movw	r22, r26
 22c:	cf 01       	movw	r24, r30
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
